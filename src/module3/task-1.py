import numpy as np
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import pandas as pd


# парсим csv файл с помощью pandas
X = pd.read_csv("data/34_16.csv", header = None)

print("________________________________________________________________")
# здесь мы задаём в качестве n_components количество главных компонент, которые мы хотим взять.
# svd_solver='full' значит, что метод будет решать "честно", а не рандомизированно.
# PCA возвращает объект, у которого есть какое-то количество методов
#  для вытаскивания полученных данных
pca = PCA(n_components=10, svd_solver='full')

# метод fit_transform применяет метод к объекту X и переводит его в новые координаты
# с уменьшением размерности
# у него в первом столбце координаты всех объектов по первой главной компоненте,
# во втором -- их же координаты по второй ГК и т.д.
X_transformed = pca.fit_transform(X)

# здесь берём только нулевую строку, потому что нас интересют координаты
# только первого объекта из входной выборки
for i in range(len(X_transformed[0])):
    print(f"Координата первого объекта относительно {i + 1} компонент:", round(X_transformed[0][i],3))

print("________________________________________________________________")

# cчитаем сумму доль дисперсий вносимых добавлением каждой новой главной компоненты
# pca -> это объект, который мы получаем считая МГК для указанного количества компонент
# explained_variance_ratio_ -> метод pca выдающий сколько добавление каждой новой компоненты
# добавляет в долю необъяснённой дисперсии.
# np.cumsum -> считает сумму массива с накоплением [1, 2, 3] -> [1, 3, 6] 
# округляем всё до трёх знаков
explained_variance = np.round(np.cumsum(pca.explained_variance_ratio_), 3)
for i in range(len(X_transformed[0])):
    print(f"доля необъяснённой дисперсии для {i + 1} компонент:", round(explained_variance[i],3))
print("________________________________________________________________")

#num -> номер компоненты, при добавлении которой доля необъяснённой дисперсии становится больше чем то, что указано в задании.
plt.plot(X_transformed[:, 0], X_transformed[:, 1], 'o', markersize=4)
plt.show()